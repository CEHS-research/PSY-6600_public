dplyr::select(sex2 %in% c("Male", "Female")))
return(res)
}
)
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex2 %in% c("Male", "Female")))
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex2 %in% c("Male", "Female")))
return(res)
}
)
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex2 %in% c("Male", "Female")) %>%
dplyr::mutate(sex2 = fct_drop(sex2)))
return(res)
}
)
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + generation_statusNA
asi_cog    ~ assist + resp + sup + ei + mc + generation_statusNA
asi_soc    ~ assist + resp + sup + ei + mc + generation_statusNA
cesd_som   ~ assist + resp + sup + ei + mc + generation_statusNA
cesd_pos   ~ assist + resp + sup + ei + mc + generation_statusNA
cesd_dep   ~ assist + resp + sup + ei + mc + generation_statusNA
cesd_int   ~ assist + resp + sup + ei + mc + generation_statusNA
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df)
return(res)
}
)
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + sex2
asi_cog    ~ assist + resp + sup + ei + mc
asi_soc    ~ assist + resp + sup + ei + mc
cesd_som   ~ assist + resp + sup + ei + mc
cesd_pos   ~ assist + resp + sup + ei + mc
cesd_dep   ~ assist + resp + sup + ei + mc
cesd_int   ~ assist + resp + sup + ei + mc
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df)
return(res)
}
)
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc
asi_cog    ~ assist + resp + sup + ei + mc
asi_soc    ~ assist + resp + sup + ei + mc
cesd_som   ~ assist + resp + sup + ei + mc
cesd_pos   ~ assist + resp + sup + ei + mc
cesd_dep   ~ assist + resp + sup + ei + mc
cesd_int   ~ assist + resp + sup + ei + mc
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df)
return(res)
}
)
df_scored$sex2 %>% table
df_scored <- long_df %>%
dplyr::mutate_at(vars(cesd_4, cesd_8, cesd_12, cesd_16), #
function(x) 5 - x) %>%
dplyr::mutate(cesd_som = furniture::rowsums(cesd_1, # somatic activity/
cesd_2,
cesd_5,
cesd_7,
cesd_11,
cesd_13,
cesd_20)) %>%
dplyr::mutate(cesd_dep = furniture::rowsums(cesd_3,   # Depressed affect
cesd_6,
cesd_9,
cesd_10,
cesd_14,
cesd_17,
cesd_18)) %>%
dplyr::mutate(cesd_pos = furniture::rowsums(cesd_4, # Positive affect
cesd_8,
cesd_12,
cesd_16)) %>%
dplyr::mutate(cesd_int = furniture::rowsums(cesd_15,   # Interpersonal difficulties
cesd_19)) %>%
dplyr::mutate(asi_soc = furniture::rowsums(ASI_1, # social concerns
ASI_6, #No items need to be reverse coded
ASI_9,
ASI_11,
ASI_13,
ASI_17)) %>%
dplyr::mutate(asi_cog = furniture::rowsums(ASI_2, # cognitive concerns
ASI_5,
ASI_10,
ASI_14,
ASI_16,
ASI_18)) %>%
dplyr::mutate(asi_phys = furniture::rowsums(ASI_3, # physical concerns
ASI_4,
ASI_7,
ASI_8,
ASI_12,
ASI_15)) %>%
dplyr::mutate(SS_average = furniture::rowmeans(SS_16,## Somatic Symptoms
SS_17,# No items need to be reverse coded
SS_18,# something that will tell us a general count Y or N if they said 2 or 3 (sometimes or often)
SS_19,
SS_20,
SS_21,
SS_22,
SS_23,
SS_24,
SS_25,
SS_26,
SS_27,
SS_28,
SS_29,
SS_30)) %>%
dplyr::mutate_at(vars(SS_16, SS_17, SS_18, SS_19, SS_20,
SS_21, SS_22, SS_23, SS_24, SS_25,
SS_26, SS_27, SS_28, SS_29, SS_30),
factor) %>%
dplyr::mutate_at(vars(SS_16, SS_17, SS_18, SS_19, SS_20,
SS_21, SS_22, SS_23, SS_24, SS_25,
SS_26, SS_27, SS_28, SS_29, SS_30),
forcats::fct_recode,
"0" = "1",
"1" = "2",
"1" = "3") %>%
dplyr::mutate_at(vars(SS_16, SS_17, SS_18, SS_19, SS_20,
SS_21, SS_22, SS_23, SS_24, SS_25,
SS_26, SS_27, SS_28, SS_29, SS_30),
as.numeric) %>%
dplyr::mutate_at(vars(SS_16, SS_17, SS_18, SS_19, SS_20,
SS_21, SS_22, SS_23, SS_24, SS_25,
SS_26, SS_27, SS_28, SS_29, SS_30),
function(x) x - 1) %>%
dplyr::mutate(count_sx = furniture::rowsums(SS_16, SS_17, SS_18, SS_19, SS_20,
SS_21, SS_22, SS_23, SS_24, SS_25,
SS_26, SS_27, SS_28, SS_29, SS_30,
na.rm = TRUE)) %>%
dplyr::mutate(any_sx = ifelse(count_sx > 0, "At Least One", "None") %>%
factor()) %>%                         #Any somatic symptoms
dplyr::mutate(assist = furniture::rowmeans(AFO_1, # Current assistance
AFO_2, #None need to be reverse coded
AFO_3, ##Family Obligation
AFO_4,
AFO_5,
AFO_6,
AFO_7,
AFO_8,
AFO_9,
AFO_10,
AFO_11)) %>%
dplyr::mutate(resp = furniture:: rowmeans(AF_12, # Respect for family
AF_13,
AF_14,
AF_15,
AF_16,
AF_17,
AF_18)) %>%
dplyr::mutate(sup = furniture:: rowmeans(AF_19, # Future support
AF_20,
AF_21,
AF_22,
AF_23,
AF_24)) %>%
dplyr::mutate_at(vars(SEE_1, SEE_2, SEE_3, SEE_4,
SEE_5, SEE_11, SEE_15), # Reverse Code  (new = 6 - old)
function(x) 6 - x) %>%
dplyr::mutate(ei = furniture::rowmeans(SEE_1, # ethnic identity
SEE_2,  ##Ethnic Experience
SEE_3,
SEE_4,
SEE_5,
SEE_6,
SEE_7,
SEE_8,
SEE_9,
SEE_10,
SEE_11,
SEE_12)) %>%
dplyr::mutate(mc = furniture::rowmeans(SEE_13, # mainstream comfort
SEE_14,
SEE_15,
SEE_16,
SEE_17,
SEE_18)) %>%
dplyr::mutate(sex2 = ordered(sex2)) %>%
dplyr::mutate(sex_female = (sex2 == "Female") %>% as.numeric) %>%
dplyr::mutate(sex_other = (sex2 == "Other") %>% as.numeric) %>%
dplyr::mutate(generation_statusNA = generation_status %>%
forcats::fct_recode(NULL = "Unsure",
NULL = "Prefer not to answer") %>%
ordered()) %>%
dplyr::mutate(billsNA = bills %>%
forcats::fct_recode(NULL = "Prefer not to answer") %>%
forcats::fct_drop() %>%
ordered()) %>%
dplyr::mutate(moneyNA = money %>%
forcats::fct_recode(NULL = "Prefer not to answer") %>%
forcats::fct_drop() %>%
ordered())
df_scored %>%
dplyr::filter(.imp == 0) %>% #sex
dplyr::select(sex_female, sex_other) %>%
table() %>%
addmargins()
mids_scored <- df_scored %>%
# dplyr::filter(complete.cases(sex2, generation_statusNA, moneyNA)) %>%
dplyr::filter(.imp > 0) %>%  # removes the original dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list()
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + sex_female + sex_other
asi_cog    ~ assist + resp + sup + ei + mc
asi_soc    ~ assist + resp + sup + ei + mc
cesd_som   ~ assist + resp + sup + ei + mc
cesd_pos   ~ assist + resp + sup + ei + mc
cesd_dep   ~ assist + resp + sup + ei + mc
cesd_int   ~ assist + resp + sup + ei + mc
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df)
return(res)
}
)
semPaths(model1b,
as.expression = c("nodes", "edges"),
sizeMan = 5,  # adjust size of boxes
sizeInt = 1,
sizeLat = 4)
library(semPlot)
install.packages("semPlot")
library(semPlot)
semPaths(model1b,
as.expression = c("nodes", "edges"),
sizeMan = 5,  # adjust size of boxes
sizeInt = 1,
sizeLat = 4)
semPaths(model1b ,
"eq",
layout = "tree")
semPaths(model1b)
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df,
fixed.x = TRUE)
return(res)
}
)
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + sex_female + sex_other
asi_cog    ~ assist + resp + sup + ei + mc
asi_soc    ~ assist + resp + sup + ei + mc
cesd_som   ~ assist + resp + sup + ei + mc
cesd_pos   ~ assist + resp + sup + ei + mc
cesd_dep   ~ assist + resp + sup + ei + mc
cesd_int   ~ assist + resp + sup + ei + mc
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
#variance
sex_female ~~ sex_female
sex_other ~~ sex_other
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df,
fixed.x = TRUE)
return(res)
}
)
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df,
fixed.x = FALSE)
return(res)
}
)
varTable(fit1[1])
lavaan::varTable(fit1[1])
fit1[1]
varTable(fit1[1])
?varTable
lavaan::varTable(fit1[1])
?lavaan::varTable
lavaan::varTable(fit1[1])
class(fit1[1])
class(fit1[[1]])
lavaan::varTable(fit1[[1]])
lavaan::varTable(fit1[[2]])
lavaan::varTable(fit1[[29]])
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex2 %in% C("Male", "Female")),
fixed.x = FALSE)
return(res)
}
)
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex2 %in% c("Male", "Female")),
fixed.x = FALSE)
return(res)
}
)
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex_other == 0),
fixed.x = FALSE)
return(res)
}
)
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + sex_female
asi_cog    ~ assist + resp + sup + ei + mc
asi_soc    ~ assist + resp + sup + ei + mc
cesd_som   ~ assist + resp + sup + ei + mc
cesd_pos   ~ assist + resp + sup + ei + mc
cesd_dep   ~ assist + resp + sup + ei + mc
cesd_int   ~ assist + resp + sup + ei + mc
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex_other == 0),
fixed.x = FALSE)
return(res)
}
)
lavaan::varTable(fit1[[29]])
model1b <-
'
#regressions
asi_phys   ~ assist + resp + sup + ei + mc + sex_female
asi_cog    ~ assist + resp + sup + ei + mc + sex_female
asi_soc    ~ assist + resp + sup + ei + mc + sex_female
cesd_som   ~ assist + resp + sup + ei + mc + sex_female
cesd_pos   ~ assist + resp + sup + ei + mc + sex_female
cesd_dep   ~ assist + resp + sup + ei + mc + sex_female
cesd_int   ~ assist + resp + sup + ei + mc + sex_female
#correlated residuals
asi_phys   ~~ asi_cog + asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_cog    ~~ asi_soc + cesd_som + cesd_pos + cesd_dep + cesd_int
asi_soc    ~~ cesd_som + cesd_pos + cesd_dep + cesd_int
cesd_som   ~~ cesd_pos + cesd_dep + cesd_int
cesd_pos   ~~ cesd_dep + cesd_int
cesd_dep   ~~  cesd_int
#covariances between predictors
assist ~~ resp + sup + ei + mc
resp   ~~ sup + ei + mc
sup    ~~ ei + mc
ei     ~~ mc
'
# analysis based on all imputed datasets
fit1 <- mids_scored %>%         #use mids format
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::sem(model1b,
data = df %>%
dplyr::filter(sex_other == 0), # remove the 6 with "other" sex
fixed.x = FALSE)
return(res)
}
)
# Beta estimates (point estimates)
qhat <- lapply( fit1 , FUN = function(ll){
h1 <- lavaan::parameterEstimates(ll)
parnames <- paste0( h1$lhs , h1$op , h1$rhs )
v1 <- h1$est
names(v1) <- parnames
return(v1)
} )
# Standard error of the beta estimates
se <- lapply( fit1 , FUN = function(ll){
h1 <- lavaan::parameterEstimates(ll)
parnames <- paste0( h1$lhs , h1$op , h1$rhs )
v1 <- h1$se
names(v1) <- parnames
return(v1)
} )
# Square the SE to get Variances
se2 <- lapply( se , FUN = function(ss){ ss^2 } )
# use mitml for mediation, input beta estimates and their variances
results1 <- mitml::testEstimates(qhat=qhat,  # point estimates
uhat=se2)   # variance around the point estimates
#confidence intervals
confint(results1, level = 0.95)
#view results (pooled for all 50 replications)
results1
remotes::install_github("tysonstanley/furniture")
Enter one or more numbers, or an empty line to skip updates:
remotes::install_github("tysonstanley/furniture")
