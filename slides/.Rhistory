#RECODED so higher value = positive- range from 1-5
mi_long$AEQ_2r = recode(mi_long$AEQ_2, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_5r = recode(mi_long$AEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_6r = recode(mi_long$AEQ_6, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>%
mutate(aeq = mean(c(AEQ_1, AEQ_2r, AEQ_3, AEQ_4, AEQ_5r, AEQ_6r, AEQ_7), na.rm = TRUE))
#og_data <- mi_long %>% filter(.imp==0)
aeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$aeq),sd(x$aeq))))
aeq_desc2 <- aeq_desc[-1]
round(Reduce("+",aeq_desc2)/length(aeq_desc2), 3)
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2r + AEQ_3 + AEQ_4 + AEQ_5r + AEQ_6r + AEQ_7'
# aeq_fit <- cfa(aeq.model, data = mi_long)
# reliability(aeq_fit)
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
# parnames <- paste0( h1$lhs , h1$op , h1$rhs )
# v1 <- h1$est
# # names(v1) <- parnames
return(h1)
} )
#mi_long %>% ggplot(aes(aeq)) + geom_histogram()
#MEEQ-RECODED so higher value = positive- range from 1-5
mi_long$MEEQ_1r = recode(mi_long$MEEQ_1, "1=5; 2=4; 4=2; 5=1")
mi_long$MEEQ_5r = recode(mi_long$MEEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>% mutate(meeq = mean(c(MEEQ_1r, MEEQ_2, MEEQ_3, MEEQ_4, MEEQ_5r, MEEQ_6), na.rm = TRUE))
meeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$meeq),sd(x$meeq))))
meeq_desc2 <- meeq_desc[-1]
round(Reduce("+",meeq_desc2)/length(meeq_desc2), 3)
#mi_long %>% ggplot(aes(meeq)) + geom_histogram()
summary(mi_long$meeq)
summary(mi_long$aeq)
#### Specify the measure
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2r + AEQ_3 + AEQ_4 + AEQ_5r + AEQ_6r + AEQ_7'
#### Fit a CFA model to EACH of the 50 replicates
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the AEQ are coming up odd??
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2r, AEQ_3, AEQ_4, AEQ_5r, AEQ_6r, AEQ_7)
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2r, AEQ_3, AEQ_4, AEQ_5r, AEQ_6r, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5r, AEQ_6, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
psych::alpha()
mi_long %>%
dplyr::filter(.imp == 1) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
psych::alpha()
#### Specify the measure- MEEQ
meeq.model <- 'meeq =~ MEEQ_1 + MEEQ_2 + MEEQ_3 + MEEQ_4 + MEEQ_5 + MEEQ_6'
#### Fit a CFA model to EACH of the 50 replicates
meeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(meeq.model, data = df)
return(res)
}
)
qhat <- lapply(meeq_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the MEEQ range from .36-.41
#### Specify the measure- MEEQ
meeq.model <- 'meeq =~ MEEQ_1 + MEEQ_2 + MEEQ_3 + MEEQ_4 + MEEQ_5r + MEEQ_6'
#### Fit a CFA model to EACH of the 50 replicates
meeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(meeq.model, data = df)
return(res)
}
)
qhat <- lapply(meeq_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the MEEQ range from .36-.41
#### Specify the measure
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2 + AEQ_3 + AEQ_4 + AEQ_5 + AEQ_6 + AEQ_7'
#### Fit a CFA model to EACH of the 50 replicates
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the AEQ are coming up odd??
mi_long %>%
dplyr::filter(.imp == 0)
mi_long %>%
dplyr::filter(.imp == 0) %>%
dplyr::select(id, AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7)
mi_long %>%
dplyr::filter(.imp == 0)
#For SPSS versions- multiple columns for multiple response questions
df_AB <- read_sav("Dissertation_XAB_FINAL.sav")
df_BC <- read_sav("Dissertation_XBC_FINAL.sav")
df_AC <- read_sav("Dissertation_XAC_FINAL.sav")
#Qualtrics has a number of unecessary variables that can be deleted:
#names(df_BC)
df_AC <- df_AC %>% dplyr::select(-c(StartDate, EndDate, Status, IPAddress, Progress, Duration__in_seconds_, Finished, RecordedDate, ResponseId, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference, LocationLatitude, LocationLongitude, DistributionChannel, UserLanguage, Q165, Q123,opp, rid,RISN, V,  uig,gc, term,  Q_TotalDuration))
df_AB <- df_AB %>% dplyr::select(-c(StartDate, EndDate, Status, IPAddress, Progress, Duration__in_seconds_, Finished, RecordedDate, ResponseId, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference, LocationLatitude, LocationLongitude, DistributionChannel, UserLanguage, Q165, Q123,opp, rid,RISN, V,  uig,gc, term,  Q_TotalDuration))
df_BC <- df_BC %>% dplyr::select(-c(StartDate, EndDate, Status, IPAddress, Progress, Duration__in_seconds_, Finished, RecordedDate, ResponseId, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference, LocationLatitude, LocationLongitude, DistributionChannel, UserLanguage, Q165, Q123,opp, rid,RISN, V,  uig,gc, term,  Q_TotalDuration, Generoth___Topics))
#creates id, RandomID from qualtrics has duplicates.
df_AB$id <- 1:nrow(df_AB) + 1000
df_AC$id <- 1:nrow(df_AC) + 2000
df_BC$id <- 1:nrow(df_BC) + 3000
#moves id variable and RandomID to beginning
df_AB <- df_AB[c(223, 222, 1:221)]
df_AC <- df_AC[c(222, 221, 1:220)]
df_BC <- df_BC[c(223, 222, 1:221)]
#Combining datasets- Online resource to help make this code: https://amywhiteheadresearch.wordpress.com/2013/05/13/combining-dataframes-when-the-columns-dont-match/
rbind.all.columns <- function(df_AB, df_AC) {
x.diff <- setdiff(colnames(df_AB), colnames(df_AC))
y.diff <- setdiff(colnames(df_AC), colnames(df_AB))
df_AB[, c(as.character(y.diff))] <- NA
df_AC[, c(as.character(x.diff))] <- NA
return(rbind(df_AB, df_AC))
}
df1 <- rbind.all.columns(df_AB, df_AC)
rbind.all.columns <- function(df1, df_BC) {
x.diff <- setdiff(colnames(df1), colnames(df_BC))
y.diff <- setdiff(colnames(df_BC), colnames(df1))
df1[, c(as.character(y.diff))] <- NA
df_BC[, c(as.character(x.diff))] <- NA
return(rbind(df1, df_BC))
}
df <- rbind.all.columns(df1, df_BC)
View(df_AB)
mi_long %>%
dplyr::filter(.imp == 0) %>%
dplyr::select(id, AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7)
mi_long %>%
dplyr::filter(.imp == 1) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
furniture::tableC()
library(tidyverse)
library(furniture)
library(haven)
library(psych)
library(data.table)
library(car)
library(pander)
library(corrr)
library(naniar)
library(mice)
library(gtools)
library(NHANES)
library(readr)
library(xtable)
library(gridExtra)
library(prettyR)
library(corrplot)
library(foreign)
library(labelled)
library(miceadds)
library(mitools)
library(purrr)
library(lavaan)
library(semTools)
library(sjPlot)
library(tidyr)
library(repurrrsive)
library(listviewer)
library(RMediation)
library(effects)
library(psy)
#mi3_datlist <- load.Rdata2(filename="MIoutput3_v3_may20/MIoutput3_v3_may20__DATALIST.Rdata")
# # attributes(mi3_datlist)
mi_dat3 <- load.Rdata2(filename="MIoutput3_v3_may20/MIoutput3_v3_may20.Rdata")
# attributes(mi_dat3)
# str(mi_dat3)
#mi_dat3$data
#mi_dat3$imp[1]
#mi_dat3$imp[5]
#mice::complete(data = mi_dat3,
#              action = 0)
#mice::complete(data = mi_dat3,
#              action = 1)
#mice::complete(data = mi_dat3,
#              action = 5)
mi_long <- mice::complete(data = mi_dat3,
action = "long",
include = TRUE)
#mi_mild <- mice::complete(mi_dat3, mild = TRUE)
#mi_long <- mice::complete(imp3, "long", include = FALSE)
##need to include original data if we want to convert back to mids object after variables are created
# attributes(mi_long)
# str(mi_long)
# class(mi_long)
#names(mi_long)
# stripplot(mi_dat3, BARCS_01~ .imp)
# plot(mi_long, c("Gen", "Mar", "Region", "Live"))
# plot(mi_long, c("DASS_03", "DASS_04", "DASS_06", "DASS_07"))
# plot(mi_long, c("BARCS_03", "BARCS_04", "BARCS_06", "BARCS_07"))
#AEQ
#RECODED so higher value = positive- range from 1-5
mi_long$AEQ_2r = recode(mi_long$AEQ_2, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_5r = recode(mi_long$AEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_6r = recode(mi_long$AEQ_6, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>%
mutate(aeq = mean(c(AEQ_1, AEQ_2r, AEQ_3, AEQ_4, AEQ_5r, AEQ_6r, AEQ_7), na.rm = TRUE))
#og_data <- mi_long %>% filter(.imp==0)
aeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$aeq),sd(x$aeq))))
aeq_desc2 <- aeq_desc[-1]
round(Reduce("+",aeq_desc2)/length(aeq_desc2), 3)
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2r + AEQ_3 + AEQ_4 + AEQ_5r + AEQ_6r + AEQ_7'
# aeq_fit <- cfa(aeq.model, data = mi_long)
# reliability(aeq_fit)
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
# parnames <- paste0( h1$lhs , h1$op , h1$rhs )
# v1 <- h1$est
# # names(v1) <- parnames
return(h1)
} )
#mi_long %>% ggplot(aes(aeq)) + geom_histogram()
#MEEQ-RECODED so higher value = positive- range from 1-5
mi_long$MEEQ_1r = recode(mi_long$MEEQ_1, "1=5; 2=4; 4=2; 5=1")
mi_long$MEEQ_5r = recode(mi_long$MEEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>% mutate(meeq = mean(c(MEEQ_1r, MEEQ_2, MEEQ_3, MEEQ_4, MEEQ_5r, MEEQ_6), na.rm = TRUE))
meeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$meeq),sd(x$meeq))))
meeq_desc2 <- meeq_desc[-1]
round(Reduce("+",meeq_desc2)/length(meeq_desc2), 3)
#mi_long %>% ggplot(aes(meeq)) + geom_histogram()
summary(mi_long$meeq)
summary(mi_long$aeq)
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5r, AEQ_6, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 2) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 0) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
furniture::tableC()
mi_long %>%
dplyr::filter(.imp == 1) %>%
dplyr::select(AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7) %>%
furniture::tableC()
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#### Specify the measure
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2 + AEQ_3 + AEQ_4 + AEQ_5 + AEQ_6 + AEQ_7'
#### Fit a CFA model to EACH of the 50 replicates
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the AEQ are coming up odd??
mi_long %>%
dplyr::filter(.imp == 0) %>%
dplyr::select(id, AEQ_1, AEQ_2, AEQ_3, AEQ_4, AEQ_5, AEQ_6, AEQ_7)
mi_long %>%
dplyr::filter(.imp == 1) %>%
dplyr::select(AEQ_1, AEQ_3, AEQ_4, AEQ_7) %>%
furniture::tableC()
#### Specify the measure
aeqP.model <- 'aeq =~ AEQ_1 + AEQ_3 + AEQ_4 + AEQ_7'
#### Fit a CFA model to EACH of the 50 replicates
aeqP_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeqP.model, data = df)
return(res)
}
)
qhat <- lapply(aeqP_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the AEQ are coming up odd??
#### Specify the measure
aeqN.model <- 'aeq =~ AEQ_2 + AEQ_5 + AEQ_6'
#### Fit a CFA model to EACH of the 50 replicates
aeqN_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeqN.model, data = df)
return(res)
}
)
qhat <- lapply(aeqN_fit , FUN = function(ll){
h1 <- reliability(ll)
return(h1)})
length(qhat)
#### Extract the 50 alpha's and summarize(min, max, mean, median, ect.)
extract_alpha <- function(mat){
mat[1, 1]
}
lapply(qhat, extract_alpha) %>% unlist() %>% summary()
#The Alphas for the AEQ are coming up odd??
#AEQ
#RECODED so higher value = positive- range from 1-5
mi_long$AEQ_2r = recode(mi_long$AEQ_2, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_5r = recode(mi_long$AEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_6r = recode(mi_long$AEQ_6, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>%
mutate(aeq_pos = mean(c(AEQ_1, AEQ_3, AEQ_4, AEQ_7), na.rm = TRUE)) %>%
mutate(aeq_neg = mean(c(AEQ_2, AEQ_5, AEQ_6), na.rm = TRUE))
#og_data <- mi_long %>% filter(.imp==0)
aeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$aeq),sd(x$aeq))))
aeq_desc2 <- aeq_desc[-1]
round(Reduce("+",aeq_desc2)/length(aeq_desc2), 3)
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2r + AEQ_3 + AEQ_4 + AEQ_5r + AEQ_6r + AEQ_7'
# aeq_fit <- cfa(aeq.model, data = mi_long)
# reliability(aeq_fit)
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
# parnames <- paste0( h1$lhs , h1$op , h1$rhs )
# v1 <- h1$est
# # names(v1) <- parnames
return(h1)
} )
#mi_long %>% ggplot(aes(aeq)) + geom_histogram()
#MEEQ-RECODED so higher value = positive- range from 1-5
mi_long$MEEQ_1r = recode(mi_long$MEEQ_1, "1=5; 2=4; 4=2; 5=1")
mi_long$MEEQ_5r = recode(mi_long$MEEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>% mutate(meeq = mean(c(MEEQ_1r, MEEQ_2, MEEQ_3, MEEQ_4, MEEQ_5r, MEEQ_6), na.rm = TRUE))
meeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$meeq),sd(x$meeq))))
meeq_desc2 <- meeq_desc[-1]
round(Reduce("+",meeq_desc2)/length(meeq_desc2), 3)
#mi_long %>% ggplot(aes(meeq)) + geom_histogram()
summary(mi_long$meeq)
summary(mi_long$aeq)
mi_long %>%
dplyr::select(.imp == 2) %>%
cor.test(~ aeq_pos + aeq_neg,
data = .)
mi_long %>%
dplyr::filter(.imp == 2) %>%
cor.test(~ aeq_pos + aeq_neg,
data = .)
mi_long %>%
dplyr::filter(.imp == 1) %>%
cor.test(~ aeq_pos + aeq_neg,
data = .)
#AEQ
#RECODED so higher value = positive- range from 1-5
mi_long$AEQ_2r = recode(mi_long$AEQ_2, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_5r = recode(mi_long$AEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long$AEQ_6r = recode(mi_long$AEQ_6, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>%
mutate(aeq_pos = mean(c(AEQ_1, AEQ_3, AEQ_4, AEQ_7), na.rm = TRUE)) %>%
mutate(aeq_neg = mean(c(AEQ_2r, AEQ_5r, AEQ_6r), na.rm = TRUE))
#og_data <- mi_long %>% filter(.imp==0)
aeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$aeq),sd(x$aeq))))
aeq_desc2 <- aeq_desc[-1]
round(Reduce("+",aeq_desc2)/length(aeq_desc2), 3)
aeq.model <- 'aeq =~ AEQ_1 + AEQ_2r + AEQ_3 + AEQ_4 + AEQ_5r + AEQ_6r + AEQ_7'
# aeq_fit <- cfa(aeq.model, data = mi_long)
# reliability(aeq_fit)
aeq_fit <- mi_long %>%
dplyr::filter(.imp > 0) %>%  # removes the origial dataset we don't need
dplyr::group_by(.imp) %>%
tidyr::nest() %>%
dplyr::pull(data) %>%
as.list() %>%         # at this point we have a list, length 50, containing the 50 MI dataframes
lapply(FUN = function(df){    # lapply runs the function list-wise over all the 50 MI dataframes
res <- lavaan::cfa(aeq.model, data = df)
return(res)
}
)
qhat <- lapply(aeq_fit , FUN = function(ll){
h1 <- reliability(ll)
# parnames <- paste0( h1$lhs , h1$op , h1$rhs )
# v1 <- h1$est
# # names(v1) <- parnames
return(h1)
} )
#mi_long %>% ggplot(aes(aeq)) + geom_histogram()
#MEEQ-RECODED so higher value = positive- range from 1-5
mi_long$MEEQ_1r = recode(mi_long$MEEQ_1, "1=5; 2=4; 4=2; 5=1")
mi_long$MEEQ_5r = recode(mi_long$MEEQ_5, "1=5; 2=4; 4=2; 5=1")
mi_long <- mi_long %>% rowwise() %>% mutate(meeq = mean(c(MEEQ_1r, MEEQ_2, MEEQ_3, MEEQ_4, MEEQ_5r, MEEQ_6), na.rm = TRUE))
meeq_desc <- with(mi_long, by(mi_long, .imp, function(x) c(mean(x$meeq),sd(x$meeq))))
meeq_desc2 <- meeq_desc[-1]
round(Reduce("+",meeq_desc2)/length(meeq_desc2), 3)
#mi_long %>% ggplot(aes(meeq)) + geom_histogram()
summary(mi_long$meeq)
summary(mi_long$aeq)
mi_long %>%
dplyr::filter(.imp == 1) %>%
cor.test(~ aeq_pos + aeq_neg,
data = .)
